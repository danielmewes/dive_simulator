(()=>{"use strict";var t={127:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BvmModel=void 0;const a=i(303);class s extends a.DecompressionModel{constructor(t={}){super(),this.WATER_VAPOR_PRESSURE=.0627,this.PRESSURE_OTHER_GASES=.0526,this.NITROGEN_HALF_TIMES=[5,40,240],this.HELIUM_HALF_TIMES=[2.5,20,120],this.DIFFUSION_MODIFIERS=[1,.7,.3],this.MECHANICAL_RESISTANCE=[1,1.2,1.5],this.RISK_WEIGHTINGS=[.6,.3,.1],"number"==typeof t?(this.conservatismLevel=Math.max(0,Math.min(5,t)),this.maxDcsRisk=5):(this.conservatismLevel=Math.max(0,Math.min(5,t.conservatism||3)),this.maxDcsRisk=Math.max(.1,Math.min(100,t.maxDcsRisk||5))),this.bubbleVolumeParameters={criticalBubbleVolume:100,formationRateConstant:.1,resolutionRateConstant:.05,surfaceTensionFactor:.0179,temperatureFactor:310.15}}initializeTissueCompartments(){const t=[5,40,240],e=[2.5,20,120],i=[1,.7,.3],a=[1,1.2,1.5],s=[.6,.3,.1];this.tissueCompartments=[],this.bvmCompartments=[];for(let n=0;n<3;n++){const r=t[n],o=e[n],m=i[n],l=a[n],u=s[n];if(void 0===r||void 0===o||void 0===m||void 0===l||void 0===u)throw new Error(`Invalid compartment parameters for compartment ${n+1}`);const h={number:n+1,nitrogenHalfTime:r,heliumHalfTime:o,nitrogenLoading:.79*this.surfacePressure,heliumLoading:0,get totalLoading(){return this.nitrogenLoading+this.heliumLoading}},c={number:n+1,nitrogenHalfTime:r,heliumHalfTime:o,nitrogenLoading:.79*this.surfacePressure,heliumLoading:0,get totalLoading(){return this.nitrogenLoading+this.heliumLoading},bubbleVolume:0,bubbleFormationRate:0,bubbleResolutionRate:0,diffusionModifier:m,mechanicalResistance:l,riskWeighting:u};this.tissueCompartments.push(h),this.bvmCompartments.push(c)}}updateTissueLoadings(t){const e=this.calculatePartialPressure(this.currentDiveState.gasMix.nitrogen),i=this.calculatePartialPressure(this.currentDiveState.gasMix.helium);for(let a=0;a<this.bvmCompartments.length;a++){const s=this.bvmCompartments[a];if(!s)throw new Error(`Missing compartment data for index ${a}`);const n=s.nitrogenHalfTime/s.diffusionModifier;s.nitrogenLoading=this.calculateHaldaneLoading(s.nitrogenLoading,e,n,t);const r=s.heliumHalfTime/s.diffusionModifier;s.heliumLoading=this.calculateHaldaneLoading(s.heliumLoading,i,r,t);const o=this.tissueCompartments[a];o&&(o.nitrogenLoading=s.nitrogenLoading,o.heliumLoading=s.heliumLoading),this.updateBubbleVolume(s,t)}}calculateCeiling(){let t=0;for(const e of this.bvmCompartments){const i=this.calculateCompartmentCeiling(e);t=Math.max(t,i)}return Math.max(0,t)}calculateDecompressionStops(){const t=[],e=this.calculateCeiling();if(e<=0)return t;let i=3*Math.ceil(e/3);for(;i>0;){const e=this.calculateStopTime(i);e>0&&t.push({depth:i,time:e,gasMix:this.currentDiveState.gasMix}),i-=3}return t}canAscendDirectly(){return this.calculateDCSRisk()<=this.maxDcsRisk}getModelName(){return`BVM(3)+${this.conservatismLevel}`}getMaxDcsRisk(){return this.maxDcsRisk}setMaxDcsRisk(t){this.maxDcsRisk=Math.max(.1,Math.min(100,t))}calculateTotalDcsRisk(){let t=0;for(const e of this.bvmCompartments)t+=this.calculateCompartmentRisk(e)*e.riskWeighting;return t}getBvmCompartmentData(t){if(t<1||t>3)throw new Error("BVM(3) compartment number must be between 1 and 3");const e=this.bvmCompartments[t-1];if(!e)throw new Error(`Compartment ${t} not found`);return{...e}}calculateBubbleVolume(t){if(t<1||t>3)throw new Error("BVM(3) compartment number must be between 1 and 3");const e=this.bvmCompartments[t-1];if(!e)throw new Error(`Compartment ${t} not found. Total compartments: ${this.bvmCompartments.length}`);return e.bubbleVolume}updateBubbleVolume(t,e){const i=t.nitrogenLoading+t.heliumLoading,a=this.currentDiveState.ambientPressure,s=Math.max(0,i-a);t.bubbleFormationRate=s>0?this.bubbleVolumeParameters.formationRateConstant*s*t.diffusionModifier:0,t.bubbleResolutionRate=this.bubbleVolumeParameters.resolutionRateConstant*t.bubbleVolume*t.mechanicalResistance;const n=(t.bubbleFormationRate-t.bubbleResolutionRate)*e;t.bubbleVolume=Math.max(0,t.bubbleVolume+n);const r=1+.1*this.conservatismLevel;t.bubbleVolume*=r}calculateCompartmentRisk(t){return Math.max(0,t.bubbleVolume-this.bubbleVolumeParameters.criticalBubbleVolume)/this.bubbleVolumeParameters.criticalBubbleVolume}calculateCompartmentCeiling(t){const e=(t.nitrogenLoading+t.heliumLoading-this.calculateAllowablePressureDrop(t)-this.surfacePressure)/.1;return Math.max(0,e)}calculateAllowablePressureDrop(t){const e=t.bubbleVolume/this.bubbleVolumeParameters.criticalBubbleVolume;return 1*(.5+.5*(1-this.maxDcsRisk/100))/(1+e)}calculateStopTime(t){if(t<=this.calculateCeiling())return 0;let e=0;for(const t of this.bvmCompartments){const i=this.maxDcsRisk/100,a=this.bubbleVolumeParameters.criticalBubbleVolume*(1+i);if(t.bubbleVolume>a){const i=(t.bubbleVolume-a)/(t.bubbleResolutionRate+.001);e=Math.max(e,i)}}return Math.max(1,Math.min(30,e))}getAcceptableRiskThreshold(){return.1*(1-.1*this.conservatismLevel)}calculateDCSRisk(){const t=this.calculateTotalDcsRisk(),e=Math.min(100,100*t);return Math.round(10*e)/10}resetToSurface(){super.resetToSurface(),this.bvmCompartments.forEach(t=>{t.bubbleVolume=0,t.bubbleFormationRate=0,t.bubbleResolutionRate=0})}}e.BvmModel=s},303:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.DecompressionModel=void 0,e.DecompressionModel=class{constructor(){this.tissueCompartments=[],this.surfacePressure=1.013,this.initializeTissueCompartments(),this.currentDiveState={depth:0,time:0,gasMix:{oxygen:.21,helium:0,get nitrogen(){return 1-this.oxygen-this.helium}},ambientPressure:this.surfacePressure}}updateDiveState(t){this.currentDiveState={...this.currentDiveState,...t},void 0!==t.depth&&(this.currentDiveState.ambientPressure=this.calculateAmbientPressure(t.depth))}getTissueCompartments(){return this.tissueCompartments}getDiveState(){return{...this.currentDiveState}}calculateAmbientPressure(t){return this.surfacePressure+.1*t}calculatePartialPressure(t,e){return t*(void 0!==e?this.calculateAmbientPressure(e):this.currentDiveState.ambientPressure)}calculateHaldaneLoading(t,e,i,a){const s=Math.log(2)/i;return e+(t-e)*Math.exp(-s*a)}resetToSurface(){this.tissueCompartments.forEach(t=>{t.nitrogenLoading=.79*this.surfacePressure,t.heliumLoading=0}),this.currentDiveState={depth:0,time:0,gasMix:{oxygen:.21,helium:0,get nitrogen(){return 1-this.oxygen-this.helium}},ambientPressure:this.surfacePressure}}}},381:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TbdmModel=void 0;const a=i(303);class s extends a.DecompressionModel{constructor(t={}){const e={bodyTemperature:37,atmosphericPressure:1.013,temperatureAdjustmentFactor:1,metabolicBubbleRate:.001,surfaceTensionParameter:.0728,conservatismFactor:1,...t};if(e.conservatismFactor<.5||e.conservatismFactor>2)throw new Error("TBDM conservatism factor must be between 0.5 and 2.0");super(),this.tbdmCompartments=[],this.NITROGEN_HALF_TIMES=[4,8.2,12.8,18.7,27.8,38.9,54.7,77.5,110,146.2,187.9,239.6,305.8,390.7,498.4,635.8],this.HELIUM_HALF_TIMES=[1.5,3.1,4.8,7.2,10.4,14.6,20.7,29.3,41.5,55.4,70.9,90.6,115.7,147.8,188.6,240.4],this.BUBBLE_NUCLEATION_THRESHOLDS=[2.8,2.6,2.4,2.2,2,1.9,1.8,1.7,1.6,1.5,1.4,1.35,1.3,1.25,1.2,1.15],this.BUBBLE_ELIMINATION_RATES=[.23,.18,.14,.11,.085,.065,.048,.035,.026,.019,.015,.012,.009,.007,.0055,.0045],this.TISSUE_PERFUSION_RATES=[850,650,480,350,260,190,140,100,75,55,42,32,25,19,15,12],this.BUBBLE_FORMATION_COEFFICIENTS=[1.8,1.6,1.4,1.3,1.2,1.15,1.1,1.05,1,.95,.9,.88,.85,.82,.8,.78],this.tbdmParameters=e,this.initializeTissueCompartments()}initializeTissueCompartments(){this.tissueCompartments=[],this.tbdmCompartments=[];const t=[4,8.2,12.8,18.7,27.8,38.9,54.7,77.5,110,146.2,187.9,239.6,305.8,390.7,498.4,635.8],e=[1.5,3.1,4.8,7.2,10.4,14.6,20.7,29.3,41.5,55.4,70.9,90.6,115.7,147.8,188.6,240.4],i=[2.8,2.6,2.4,2.2,2,1.9,1.8,1.7,1.6,1.5,1.4,1.35,1.3,1.25,1.2,1.15],a=[.23,.18,.14,.11,.085,.065,.048,.035,.026,.019,.015,.012,.009,.007,.0055,.0045],s=[850,650,480,350,260,190,140,100,75,55,42,32,25,19,15,12],n=[1.8,1.6,1.4,1.3,1.2,1.15,1.1,1.05,1,.95,.9,.88,.85,.82,.8,.78],r=this.tbdmParameters?.conservatismFactor||1,o=Math.min(16,t.length,e.length,i.length,a.length,s.length,n.length);for(let m=0;m<o;m++){const o={number:m+1,nitrogenHalfTime:t[m],heliumHalfTime:e[m],nitrogenLoading:.79*this.surfacePressure,heliumLoading:0,bubbleNucleationThreshold:i[m]*r,bubbleVolumeFraction:0,bubbleEliminationRate:a[m],bubbleFormationCoefficient:n[m],maxBubbleVolumeFraction:.05,tissuePerfusion:s[m],metabolicCoefficient:1+.1*Math.exp(.2*-m),get totalLoading(){return this.nitrogenLoading+this.heliumLoading}};this.tissueCompartments.push(o),this.tbdmCompartments.push(o)}}updateTissueLoadings(t){const e=this.calculatePartialPressure(this.currentDiveState.gasMix.nitrogen),i=this.calculatePartialPressure(this.currentDiveState.gasMix.helium);for(const a of this.tbdmCompartments)a.nitrogenLoading=this.calculateHaldaneLoading(a.nitrogenLoading,e,a.nitrogenHalfTime,t),a.heliumLoading=this.calculateHaldaneLoading(a.heliumLoading,i,a.heliumHalfTime,t),this.updateBubbleDynamics(a,t)}calculateCeiling(){let t=0;for(const e of this.tbdmCompartments){const i=this.calculateCompartmentCeiling(e);t=Math.max(t,i)}return Math.max(0,t)}calculateDecompressionStops(){const t=[],e=this.calculateCeiling();if(e<=0)return t;let i=3*Math.ceil(e/3);for(;i>0;){const e=this.calculateStopTime(i);e>0&&t.push({depth:i,time:e,gasMix:this.currentDiveState.gasMix}),i-=3}return t}canAscendDirectly(){return this.calculateCeiling()<=0&&this.calculateBubbleRisk()<.1}getModelName(){return`TBDM (Gernhardt-Lambertsen) CF:${this.tbdmParameters.conservatismFactor}`}calculateDCSRisk(){let t=0;for(const e of this.tbdmCompartments){const i=e.nitrogenLoading+e.heliumLoading,a=this.currentDiveState.ambientPressure,s=Math.max(0,i-a)/e.bubbleNucleationThreshold,n=e.bubbleVolumeFraction/e.maxBubbleVolumeFraction,r=Math.max(s,n)*(1+.02*(this.tbdmParameters.bodyTemperature-37))*e.metabolicCoefficient;t=Math.max(t,r)}const e=Math.min(100,t*t*45);return Math.round(10*e)/10}calculateBubbleRisk(){let t=0;for(const e of this.tbdmCompartments){const i=e.bubbleVolumeFraction/e.maxBubbleVolumeFraction;t=Math.max(t,i)}return t}getTbdmCompartmentData(t){if(t<1||t>16)throw new Error("Compartment number must be between 1 and 16");const e=this.tbdmCompartments[t-1];if(!e)throw new Error(`TBDM Compartment ${t} not found`);return{...e}}updateParameters(t){if(this.tbdmParameters={...this.tbdmParameters,...t},this.tbdmParameters.conservatismFactor<.5||this.tbdmParameters.conservatismFactor>2)throw new Error("TBDM conservatism factor must be between 0.5 and 2.0");this.initializeTissueCompartments()}getParameters(){return{...this.tbdmParameters}}updateBubbleDynamics(t,e){const i=t.nitrogenLoading+t.heliumLoading,a=this.currentDiveState.ambientPressure,s=Math.max(0,i-a);if(s>t.bubbleNucleationThreshold){const i=(s-t.bubbleNucleationThreshold)*t.bubbleFormationCoefficient*this.tbdmParameters.metabolicBubbleRate*e;t.bubbleVolumeFraction=Math.min(t.maxBubbleVolumeFraction,t.bubbleVolumeFraction+i)}const n=t.bubbleEliminationRate*(t.tissuePerfusion/100)*(a/this.surfacePressure),r=t.bubbleVolumeFraction*n*e;if(t.bubbleVolumeFraction=Math.max(0,t.bubbleVolumeFraction-r),t.bubbleVolumeFraction<.001){const i=this.tbdmParameters.surfaceTensionParameter*e;t.bubbleVolumeFraction=Math.max(0,t.bubbleVolumeFraction-i)}}calculateCompartmentCeiling(t){const e=t.nitrogenLoading+t.heliumLoading;let i=t.bubbleNucleationThreshold;i-=2*t.bubbleVolumeFraction,i/=this.tbdmParameters.conservatismFactor;const a=(e-i-this.surfacePressure)/.1;return Math.max(0,a)}calculateStopTime(t){let e=0;for(const i of this.tbdmCompartments){const a=i.nitrogenLoading+i.heliumLoading,s=this.calculateAmbientPressure(t),n=i.nitrogenHalfTime*Math.log(a/s)/Math.log(2),r=i.bubbleVolumeFraction>.001&&i.bubbleEliminationRate>0?1/i.bubbleEliminationRate*Math.log(i.bubbleVolumeFraction/.001):0,o=Math.max(n,r);e=Math.max(e,o)}return Math.max(1,Math.min(30,e*this.tbdmParameters.conservatismFactor))}}e.TbdmModel=s},645:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.VpmBModel=void 0;const a=i(303);class s extends a.DecompressionModel{constructor(t=3){super(),this.WATER_VAPOR_PRESSURE=.0627,this.SURFACE_TENSION_GRADIENT=.0179,this.PRESSURE_OTHER_GASES=.0526,this.NITROGEN_HALF_TIMES=[5,8,12.5,18.5,27,38.3,54.3,77,109,146,187,239,305,390,498,635],this.HELIUM_HALF_TIMES=[1.88,3.02,4.72,6.99,10.21,14.48,20.53,29.11,41.2,55.19,70.69,90.34,115.29,147.42,188.24,240.03],this.conservatismLevel=Math.max(0,Math.min(5,t)),this.bubbleParameters={surfaceTension:.0179,skinCompressionGamma:2,criticalVolumeLambda:750,regenerationTimeConstant:20160},this.initializeTissueCompartments()}initializeTissueCompartments(){const t=[5,8,12.5,18.5,27,38.3,54.3,77,109,146,187,239,305,390,498,635],e=[1.88,3.02,4.72,6.99,10.21,14.48,20.53,29.11,41.2,55.19,70.69,90.34,115.29,147.42,188.24,240.03];if(this.tissueCompartments=[],this.vpmBCompartments=[],this.NITROGEN_HALF_TIMES&&this.HELIUM_HALF_TIMES)for(let i=0;i<16;i++){const a=t[i],s=e[i];if(void 0===a||void 0===s)throw new Error(`Invalid half-time for compartment ${i+1}`);const n={number:i+1,nitrogenHalfTime:a,heliumHalfTime:s,nitrogenLoading:.79*this.surfacePressure,heliumLoading:0,initialCriticalRadius:this.calculateInitialCriticalRadius(i+1),adjustedCriticalRadius:0,maxCrushingPressure:0,onsetOfImpermeability:0,get totalLoading(){return this.nitrogenLoading+this.heliumLoading}};n.adjustedCriticalRadius=n.initialCriticalRadius,this.tissueCompartments.push(n),this.vpmBCompartments.push(n)}}updateTissueLoadings(t){const e=this.calculatePartialPressure(this.currentDiveState.gasMix.nitrogen),i=this.calculatePartialPressure(this.currentDiveState.gasMix.helium);for(let a=0;a<this.tissueCompartments.length;a++){const s=this.tissueCompartments[a],n=this.vpmBCompartments[a];if(!s||!n)throw new Error(`Missing compartment data for index ${a}`);s.nitrogenLoading=this.calculateHaldaneLoading(s.nitrogenLoading,e,s.nitrogenHalfTime,t),s.heliumLoading=this.calculateHaldaneLoading(s.heliumLoading,i,s.heliumHalfTime,t),this.updateBubbleDynamics(n,t)}}calculateCeiling(){let t=0;for(const e of this.vpmBCompartments){const i=this.calculateCompartmentCeiling(e);t=Math.max(t,i)}return Math.max(0,t)}calculateDecompressionStops(){const t=[],e=this.calculateCeiling();if(e<=0)return t;let i=3*Math.ceil(e/3);for(;i>0;){const e=this.calculateStopTime(i);e>0&&t.push({depth:i,time:e,gasMix:this.currentDiveState.gasMix}),i-=3}return t}canAscendDirectly(){return this.calculateCeiling()<=0}getModelName(){return`VPM-B+${this.conservatismLevel}`}calculateBubbleCount(t){if(t<1||t>16)throw new Error("Compartment number must be between 1 and 16");const e=this.vpmBCompartments[t-1];if(!e)throw new Error(`Compartment ${t} not found`);const i=e.nitrogenLoading+e.heliumLoading,a=Math.max(0,i-this.currentDiveState.ambientPressure);if(a<=0)return 0;const s=e.adjustedCriticalRadius,n=this.calculateBubbleRadius(a,s),r=4/3*Math.PI*Math.pow(n/1e6,3),o=this.bubbleParameters.criticalVolumeLambda/r;return Math.max(0,o)}getVpmBCompartmentData(t){if(t<1||t>16)throw new Error("Compartment number must be between 1 and 16");const e=this.vpmBCompartments[t-1];if(!e)throw new Error(`Compartment ${t} not found`);return{...e}}calculateInitialCriticalRadius(t){const e=[1.2599,1,.8618,.7562,.6667,.5933,.5282,.471,.4187,.3798,.3497,.3223,.2971,.2737,.2523,.2327][t-1];if(void 0===e)throw new Error(`Invalid compartment number: ${t}`);return 1e3*e}updateBubbleDynamics(t,e){const i=t.nitrogenLoading+t.heliumLoading,a=this.currentDiveState.ambientPressure;if(t.maxCrushingPressure=Math.max(t.maxCrushingPressure,a),t.adjustedCriticalRadius=Math.max(t.adjustedCriticalRadius,.001),t.onsetOfImpermeability=a+2*this.bubbleParameters.surfaceTension/t.adjustedCriticalRadius,i>a){const e=1+.1*(i-a);t.adjustedCriticalRadius=Math.min(t.adjustedCriticalRadius*e,2*t.initialCriticalRadius)}else{const i=Math.min(.99,e/this.bubbleParameters.regenerationTimeConstant);t.adjustedCriticalRadius=t.adjustedCriticalRadius*(1-i)+t.initialCriticalRadius*i}t.adjustedCriticalRadius=Math.max(Math.min(t.adjustedCriticalRadius,10*t.initialCriticalRadius),.1*t.initialCriticalRadius)}calculateCompartmentCeiling(t){const e=(t.nitrogenLoading+t.heliumLoading-this.calculateAllowableSupersaturation(t)-this.surfacePressure)/.1;return Math.max(0,e)}calculateAllowableSupersaturation(t){return 2*this.bubbleParameters.surfaceTension/Math.max(t.adjustedCriticalRadius,.001)/(1+.1*this.conservatismLevel)}calculateBubbleRadius(t,e){const i=this.bubbleParameters.surfaceTension,a=Math.max(e,.001),s=t/(2*i/a);return a*Math.pow(Math.max(s,.001),1/3)}calculateStopTime(t){const e=this.calculateCeiling();if(t<=e)return 0;const i=t-e;return Math.max(1,Math.min(30,2*i))}calculateDCSRisk(){let t=0;for(let e=1;e<=16;e++){const i=this.vpmBCompartments[e-1];if(!i)continue;const a=i.nitrogenLoading+i.heliumLoading,s=this.currentDiveState.ambientPressure,n=Math.max(0,a-s);if(n>0){const a=this.calculateAllowableSupersaturation(i),s=this.calculateBubbleCount(e),r=n/Math.max(a,.01)+Math.log10(Math.max(s,1))/10;t=Math.max(t,r)}}const e=Math.min(100,30*t);return Math.round(10*e)/10}}e.VpmBModel=s},678:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RgbmFoldedModel=void 0;const a=i(303);class s extends a.DecompressionModel{constructor(t={}){super(),this.rgbmCompartments=[],this.firstStopDepth=0,this.diveCount=1,this.lastSurfaceTime=0,this.maxDepthReached=0,this.totalBubbleVolume=0,this.NITROGEN_HALF_TIMES=[5,8,12.5,18.5,27,38.3,54.3,77,109,146,187,239,305,390,498,635],this.HELIUM_HALF_TIMES=[1.88,3.02,4.72,6.99,10.21,14.48,20.53,29.11,41.2,55.19,70.69,90.34,115.29,147.42,188.24,240.03],this.NITROGEN_M_VALUES_A=[1.2599,1,.8618,.7562,.6667,.5933,.5282,.471,.4187,.3798,.3497,.3223,.2971,.2737,.2523,.2327],this.NITROGEN_M_VALUES_B=[.505,.6514,.7222,.7825,.8126,.8434,.8693,.891,.9092,.9222,.9319,.9403,.9477,.9544,.9602,.9653],this.HELIUM_M_VALUES_A=[1.7424,1.383,1.1919,1.0458,.922,.8205,.7305,.6502,.595,.5545,.5333,.5189,.5181,.5176,.5172,.5119],this.HELIUM_M_VALUES_B=[.4245,.5747,.6527,.7223,.7582,.7957,.8279,.8553,.8757,.8903,.8997,.9073,.9122,.9171,.9217,.9267],this.BASE_BUBBLE_SEED_COUNT=1e3,this.BUBBLE_FORMATION_COEFFICIENT=.85,this.MICROBUBBLE_SURVIVAL_TIME=120,this.REPETITIVE_DIVE_THRESHOLD=6,this.settings={conservatism:t.conservatism??2,enableRepetitivePenalty:t.enableRepetitivePenalty??!0,...t},this.rgbmCompartments=[],this.firstStopDepth=0,this.diveCount=1,this.lastSurfaceTime=0,this.maxDepthReached=0,this.totalBubbleVolume=0,this.validateSettings(),this.initializeTissueCompartments()}validateSettings(){if(this.settings.conservatism<0||this.settings.conservatism>5)throw new Error("RGBM conservatism must be between 0 and 5")}initializeTissueCompartments(){if(this.tissueCompartments=[],this.rgbmCompartments=[],this.settings)for(let t=0;t<16;t++){const e={number:t+1,nitrogenHalfTime:this.NITROGEN_HALF_TIMES[t],heliumHalfTime:this.HELIUM_HALF_TIMES[t],nitrogenLoading:.79*this.surfacePressure,heliumLoading:0,nitrogenMValueA:this.NITROGEN_M_VALUES_A[t],nitrogenMValueB:this.NITROGEN_M_VALUES_B[t],heliumMValueA:this.HELIUM_M_VALUES_A[t],heliumMValueB:this.HELIUM_M_VALUES_B[t],combinedMValueA:this.NITROGEN_M_VALUES_A[t],combinedMValueB:this.NITROGEN_M_VALUES_B[t],fFactor:1,maxTension:.79*this.surfacePressure,bubbleSeedCount:this.BASE_BUBBLE_SEED_COUNT,get totalLoading(){return this.nitrogenLoading+this.heliumLoading}};this.tissueCompartments.push(e),this.rgbmCompartments.push(e),this.updateCombinedMValues(e),this.updateFFactors(e)}}updateTissueLoadings(t){const e=this.calculatePartialPressure(this.currentDiveState.gasMix.nitrogen,this.currentDiveState.ambientPressure),i=this.calculatePartialPressure(this.currentDiveState.gasMix.helium,this.currentDiveState.ambientPressure);this.maxDepthReached=Math.max(this.maxDepthReached,this.currentDiveState.depth);for(let a=0;a<this.tissueCompartments.length;a++){const s=this.tissueCompartments[a],n=this.rgbmCompartments[a];if(!s||!n)continue;const r=s.nitrogenLoading+s.heliumLoading;s.nitrogenLoading=this.calculateHaldaneLoading(s.nitrogenLoading,e,s.nitrogenHalfTime,t),s.heliumLoading=this.calculateHaldaneLoading(s.heliumLoading,i,s.heliumHalfTime,t);const o=s.nitrogenLoading+s.heliumLoading;n.maxTension=Math.max(n.maxTension,o),this.updateBubbleDynamics(n,t,r,o),this.updateCombinedMValues(n),this.updateFFactors(n)}this.updateTotalBubbleVolume()}calculateCeiling(){let t=0;0===this.firstStopDepth&&(this.firstStopDepth=this.calculateFirstStopDepth());for(const e of this.rgbmCompartments){const i=this.calculateCompartmentCeiling(e);t=Math.max(t,i)}return Math.max(0,t)}calculateDecompressionStops(){const t=[],e=this.calculateCeiling();if(e<=0)return t;this.firstStopDepth=this.calculateFirstStopDepth();let i=3*Math.ceil(e/3);for(;i>0;){const e=this.calculateStopTime(i);e>0&&t.push({depth:i,time:e,gasMix:this.currentDiveState.gasMix}),i-=3}return t}canAscendDirectly(){return this.calculateCeiling()<=0}getModelName(){return`RGBM (folded) - C${this.settings.conservatism}`}getRgbmSettings(){return{...this.settings}}setRgbmSettings(t){this.settings={...this.settings,...t},this.validateSettings(),this.firstStopDepth=0,this.rgbmCompartments.forEach(t=>{this.updateFFactors(t)})}getRgbmCompartmentData(t){if(t<1||t>16)throw new Error("Compartment number must be between 1 and 16");const e=this.rgbmCompartments[t-1];if(!e)throw new Error(`RGBM compartment ${t} not found`);return{...e}}getTotalBubbleVolume(){return this.totalBubbleVolume}calculateDCSRisk(){let t=0;for(let e=1;e<=16;e++){const i=this.rgbmCompartments[e-1];if(!i)continue;const a=i.nitrogenLoading+i.heliumLoading,s=this.currentDiveState.ambientPressure,n=(i.combinedMValueA*s+i.combinedMValueB)*i.fFactor,r=Math.max(0,a-s)/n*(1+i.bubbleSeedCount/this.BASE_BUBBLE_SEED_COUNT*.1);t=Math.max(t,r)}const e=this.calculateRepetitiveDivePenalty(),i=Math.min(100,t*t*45*(1+e));return Math.round(10*i)/10}updateCombinedMValues(t){const e=t.nitrogenLoading+t.heliumLoading;if(e<=0)return t.combinedMValueA=t.nitrogenMValueA,void(t.combinedMValueB=t.nitrogenMValueB);const i=t.nitrogenLoading/e,a=t.heliumLoading/e;t.combinedMValueA=i*t.nitrogenMValueA+a*t.heliumMValueA,t.combinedMValueB=i*t.nitrogenMValueB+a*t.heliumMValueB}updateFFactors(t){const e=1-.05*this.settings.conservatism,i=t.bubbleSeedCount/this.BASE_BUBBLE_SEED_COUNT,a=Math.max(.7,1-.1*(i-1)),s=Math.max(.8,1-this.maxDepthReached/100*.1);t.fFactor=1*e*a*s,t.fFactor=Math.max(.6,Math.min(1,t.fFactor))}updateBubbleDynamics(t,e,i,a){const s=this.currentDiveState.ambientPressure,n=Math.max(0,a-s);if(n>0){const i=n*this.BUBBLE_FORMATION_COEFFICIENT*e;t.bubbleSeedCount+=i}else{const i=.01*t.bubbleSeedCount;t.bubbleSeedCount-=i*e,t.bubbleSeedCount=Math.max(this.BASE_BUBBLE_SEED_COUNT,t.bubbleSeedCount)}t.bubbleSeedCount=Math.min(t.bubbleSeedCount,10*this.BASE_BUBBLE_SEED_COUNT)}updateTotalBubbleVolume(){this.totalBubbleVolume=0,this.rgbmCompartments.forEach(t=>{const e=Math.max(0,t.bubbleSeedCount-this.BASE_BUBBLE_SEED_COUNT);this.totalBubbleVolume+=.001*e})}calculateCompartmentCeiling(t){const e=t.nitrogenLoading+t.heliumLoading,i=t.combinedMValueA,a=t.combinedMValueB,s=i*t.fFactor,n=((e-a*t.fFactor)/s-this.surfacePressure)/.1;return Math.max(0,n)}calculateFirstStopDepth(){let t=0;for(const e of this.rgbmCompartments){const i=e.nitrogenLoading+e.heliumLoading,a=e.combinedMValueA*e.fFactor,s=((i-e.combinedMValueB*e.fFactor)/a-this.surfacePressure)/.1;t=Math.max(t,s)}return Math.max(0,3*Math.ceil(t/3))}calculateStopTime(t){if(t<=this.calculateCeiling())return 0;let e=0,i=0;for(const a of this.rgbmCompartments){const s=(a.nitrogenLoading+a.heliumLoading)/((a.combinedMValueA*this.calculateAmbientPressure(t)+a.combinedMValueB)*a.fFactor)*100,n=a.bubbleSeedCount/this.BASE_BUBBLE_SEED_COUNT;e=Math.max(e,s),i=Math.max(i,n)}const a=Math.max(1,Math.floor(e/15)),s=Math.floor(2*i);return Math.min(30,a+s)}calculateRepetitiveDivePenalty(){if(!this.settings.enableRepetitivePenalty)return 0;if(this.diveCount>1&&this.lastSurfaceTime<this.REPETITIVE_DIVE_THRESHOLD){const t=.1*(this.diveCount-1)*(1-this.lastSurfaceTime/this.REPETITIVE_DIVE_THRESHOLD);return Math.min(.3,t)}return 0}setRepetitiveDiveParams(t,e){this.diveCount=Math.max(1,t),this.lastSurfaceTime=Math.max(0,e)}resetToSurface(){super.resetToSurface(),this.maxDepthReached=0,this.totalBubbleVolume=0,this.firstStopDepth=0,this.rgbmCompartments.forEach(t=>{t.fFactor=1,t.maxTension=.79*this.surfacePressure,t.bubbleSeedCount=this.BASE_BUBBLE_SEED_COUNT})}}e.RgbmFoldedModel=s},819:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.BuhlmannModel=void 0;const a=i(303);class s extends a.DecompressionModel{constructor(t={low:30,high:85}){if(t.low<0||t.low>100)throw new Error("Gradient factor low must be between 0 and 100");if(t.high<0||t.high>100)throw new Error("Gradient factor high must be between 0 and 100");if(t.low>t.high)throw new Error("Gradient factor low cannot be greater than gradient factor high");super(),this.buhlmannCompartments=[],this.firstStopDepth=0,this.NITROGEN_HALF_TIMES=[5,8,12.5,18.5,27,38.3,54.3,77,109,146,187,239,305,390,498,635],this.HELIUM_HALF_TIMES=[1.88,3.02,4.72,6.99,10.21,14.48,20.53,29.11,41.2,55.19,70.69,90.34,115.29,147.42,188.24,240.03],this.NITROGEN_M_VALUES_A=[1.2599,1,.8618,.7562,.6667,.5933,.5282,.471,.4187,.3798,.3497,.3223,.2971,.2737,.2523,.2327],this.NITROGEN_M_VALUES_B=[.505,.6514,.7222,.7825,.8126,.8434,.8693,.891,.9092,.9222,.9319,.9403,.9477,.9544,.9602,.9653],this.HELIUM_M_VALUES_A=[1.7424,1.383,1.1919,1.0458,.922,.8205,.7305,.6502,.595,.5545,.5333,.5189,.5181,.5176,.5172,.5119],this.HELIUM_M_VALUES_B=[.4245,.5747,.6527,.7223,.7582,.7957,.8279,.8553,.8757,.8903,.8997,.9073,.9122,.9171,.9217,.9267],this.gradientFactors=t}initializeTissueCompartments(){this.tissueCompartments=[],this.buhlmannCompartments=[];const t=[5,8,12.5,18.5,27,38.3,54.3,77,109,146,187,239,305,390,498,635],e=[1.88,3.02,4.72,6.99,10.21,14.48,20.53,29.11,41.2,55.19,70.69,90.34,115.29,147.42,188.24,240.03],i=[1.2599,1,.8618,.7562,.6667,.5933,.5282,.471,.4187,.3798,.3497,.3223,.2971,.2737,.2523,.2327],a=[.505,.6514,.7222,.7825,.8126,.8434,.8693,.891,.9092,.9222,.9319,.9403,.9477,.9544,.9602,.9653],s=[1.7424,1.383,1.1919,1.0458,.922,.8205,.7305,.6502,.595,.5545,.5333,.5189,.5181,.5176,.5172,.5119],n=[.4245,.5747,.6527,.7223,.7582,.7957,.8279,.8553,.8757,.8903,.8997,.9073,.9122,.9171,.9217,.9267];for(let r=0;r<16;r++){const o={number:r+1,nitrogenHalfTime:t[r],heliumHalfTime:e[r],nitrogenLoading:.79*this.surfacePressure,heliumLoading:0,nitrogenMValueA:i[r],nitrogenMValueB:a[r],heliumMValueA:s[r],heliumMValueB:n[r],combinedMValueA:i[r],combinedMValueB:a[r],get totalLoading(){return this.nitrogenLoading+this.heliumLoading}};this.tissueCompartments.push(o),this.buhlmannCompartments.push(o),this.updateCombinedMValues(o)}}updateTissueLoadings(t){this.tissueCompartments&&0!==this.tissueCompartments.length&&this.buhlmannCompartments&&0!==this.buhlmannCompartments.length||this.initializeTissueCompartments();const e=this.calculatePartialPressure(this.currentDiveState.gasMix.nitrogen),i=this.calculatePartialPressure(this.currentDiveState.gasMix.helium);for(let a=0;a<this.tissueCompartments.length;a++){const s=this.tissueCompartments[a],n=this.buhlmannCompartments[a];s&&n&&(s.nitrogenLoading=this.calculateHaldaneLoading(s.nitrogenLoading,e,s.nitrogenHalfTime,t),s.heliumLoading=this.calculateHaldaneLoading(s.heliumLoading,i,s.heliumHalfTime,t),this.updateCombinedMValues(n))}}calculateCeiling(){let t=0;0===this.firstStopDepth&&(this.firstStopDepth=this.calculateFirstStopDepth());for(const e of this.buhlmannCompartments){const i=this.calculateCompartmentCeiling(e);t=Math.max(t,i)}return Math.max(0,t)}calculateDecompressionStops(){const t=[],e=this.calculateCeiling();if(e<=0)return t;this.firstStopDepth=this.calculateFirstStopDepth();let i=3*Math.ceil(e/3);for(;i>0;){const e=this.calculateStopTime(i);e>0&&t.push({depth:i,time:e,gasMix:this.currentDiveState.gasMix}),i-=3}return t}canAscendDirectly(){return this.calculateCeiling()<=0}getModelName(){return`Buhlmann ZHL-16C (GF ${this.gradientFactors.low}/${this.gradientFactors.high})`}getGradientFactors(){return{...this.gradientFactors}}setGradientFactors(t){if(t.low<0||t.low>100)throw new Error("Gradient factor low must be between 0 and 100");if(t.high<0||t.high>100)throw new Error("Gradient factor high must be between 0 and 100");if(t.low>t.high)throw new Error("Gradient factor low cannot be greater than gradient factor high");this.gradientFactors=t,this.firstStopDepth=0}calculateMValue(t,e){if(t<1||t>16)throw new Error("Compartment number must be between 1 and 16");this.buhlmannCompartments&&0!==this.buhlmannCompartments.length||this.initializeTissueCompartments();const i=this.buhlmannCompartments[t-1];if(!i)throw new Error(`Compartment ${t} not found. Available compartments: ${this.buhlmannCompartments.length}`);const a=this.calculateAmbientPressure(e);return i.combinedMValueA*a+i.combinedMValueB}calculateGradientFactorMValue(t,e){if(t<1||t>16)throw new Error("Compartment number must be between 1 and 16");const i=this.calculateAmbientPressure(e),a=this.calculateMValue(t,e),s=i+this.getGradientFactorAtDepth(e)/100*(a-i);return Math.min(s,a)}getBuhlmannCompartmentData(t){if(t<1||t>16)throw new Error("Compartment number must be between 1 and 16");this.buhlmannCompartments&&0!==this.buhlmannCompartments.length||this.initializeTissueCompartments();const e=this.buhlmannCompartments[t-1];if(!e)throw new Error(`Compartment ${t} not found. Available compartments: ${this.buhlmannCompartments.length}`);return{...e}}calculateSupersaturation(t){if(t<1||t>16)throw new Error("Compartment number must be between 1 and 16");this.buhlmannCompartments&&0!==this.buhlmannCompartments.length||this.initializeTissueCompartments();const e=this.buhlmannCompartments[t-1];if(!e)throw new Error(`Compartment ${t} not found. Available compartments: ${this.buhlmannCompartments.length}`);const i=this.calculateGradientFactorMValue(t,this.currentDiveState.depth),a=e.nitrogenLoading+e.heliumLoading;return Math.max(0,a/i*100)}updateCombinedMValues(t){if(!t)return;const e=t.nitrogenLoading+t.heliumLoading;if(e<=0)return t.combinedMValueA=t.nitrogenMValueA,void(t.combinedMValueB=t.nitrogenMValueB);const i=t.nitrogenLoading/e,a=t.heliumLoading/e;t.combinedMValueA=i*t.nitrogenMValueA+a*t.heliumMValueA,t.combinedMValueB=i*t.nitrogenMValueB+a*t.heliumMValueB}calculateCompartmentCeiling(t){const e=t.nitrogenLoading+t.heliumLoading,i=(this.getGradientFactorAtDepth(0),t.combinedMValueA),a=((e-t.combinedMValueB)/i-this.surfacePressure)/.1;return Math.max(0,a)}getGradientFactorAtDepth(t){if(this.firstStopDepth<=0)return this.gradientFactors.high;const e=t/this.firstStopDepth;return this.gradientFactors.high+(this.gradientFactors.low-this.gradientFactors.high)*e}calculateFirstStopDepth(){let t=0;for(const e of this.buhlmannCompartments){const i=e.nitrogenLoading+e.heliumLoading,a=e.combinedMValueA,s=((i-e.combinedMValueB)/a-this.surfacePressure)/.1;t=Math.max(t,s)}return Math.max(0,3*Math.ceil(t/3))}calculateStopTime(t){if(t<=this.calculateCeiling())return 0;let e=0;for(let t=1;t<=16;t++){const i=this.calculateSupersaturation(t);e=Math.max(e,i)}return e>120?Math.min(30,Math.max(3,Math.floor(e/10))):e>105?Math.min(15,Math.max(2,Math.floor(e/15))):e>100?Math.min(5,Math.max(1,Math.floor(e/20))):1}calculateDCSRisk(){let t=0;for(let e=1;e<=16;e++){const i=this.buhlmannCompartments[e-1];if(!i)continue;const a=i.nitrogenLoading+i.heliumLoading,s=this.currentDiveState.ambientPressure,n=(i.combinedMValueA*s+i.combinedMValueB)*(this.getGradientFactorAtDepth(this.currentDiveState.depth)/100),r=Math.max(0,a-s)/n;t=Math.max(t,r)}const e=Math.min(100,t*t*50);return Math.round(10*e)/10}}e.BuhlmannModel=s},865:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Nmri98Model=void 0;const a=i(303);class s extends a.DecompressionModel{constructor(t){super(),this.nmri98Compartments=[],this.NITROGEN_HALF_TIMES=[8,40,120],this.HELIUM_HALF_TIMES=[3,15.1,45.3],this.OXYGEN_HALF_TIMES=[6,30,90],this.M_VALUES=[1.6,1.2,1],this.LINEAR_SLOPES=[.8,.5,.3],this.CROSSOVER_PRESSURES=[.5,.3,.2],this.OXYGEN_THRESHOLDS=[1.4,1,.8],this.parameters={conservatism:3,maxDcsRisk:2,safetyFactor:1.2,enableOxygenTracking:!0,...t},this.parameters.conservatism=Math.max(0,Math.min(5,this.parameters.conservatism)),this.parameters.maxDcsRisk=Math.max(.1,Math.min(10,this.parameters.maxDcsRisk)),this.parameters.safetyFactor=Math.max(1,Math.min(2,this.parameters.safetyFactor)),this.initializeTissueCompartments()}initializeTissueCompartments(){if(this.tissueCompartments=[],this.nmri98Compartments=[],this.NITROGEN_HALF_TIMES&&this.HELIUM_HALF_TIMES&&this.OXYGEN_HALF_TIMES&&this.M_VALUES&&this.LINEAR_SLOPES&&this.CROSSOVER_PRESSURES&&this.OXYGEN_THRESHOLDS)for(let t=0;t<3;t++){const e=this.NITROGEN_HALF_TIMES[t],i=this.HELIUM_HALF_TIMES[t],a=this.OXYGEN_HALF_TIMES[t],s=this.M_VALUES[t],n=this.LINEAR_SLOPES[t],r=this.CROSSOVER_PRESSURES[t],o=this.OXYGEN_THRESHOLDS[t];if(void 0===e||void 0===i||void 0===a||void 0===s||void 0===n||void 0===r||void 0===o)continue;const m={number:t+1,nitrogenHalfTime:e,heliumHalfTime:i,nitrogenLoading:.79*this.surfacePressure,heliumLoading:0,get totalLoading(){return this.nitrogenLoading+this.heliumLoading}},l={...m,oxygenLoading:.21*this.surfacePressure,linearSlope:n,crossoverPressure:r,mValue:s,oxygenThreshold:o,get totalLoading(){return this.nitrogenLoading+this.heliumLoading}};this.tissueCompartments.push(m),this.nmri98Compartments.push(l)}}updateTissueLoadings(t){const e=this.calculatePartialPressure(this.currentDiveState.gasMix.nitrogen),i=this.calculatePartialPressure(this.currentDiveState.gasMix.helium),a=this.calculatePartialPressure(this.currentDiveState.gasMix.oxygen);for(let s=0;s<this.tissueCompartments.length;s++){const n=this.tissueCompartments[s],r=this.nmri98Compartments[s];n.nitrogenLoading=this.calculateLinearExponentialLoading(n.nitrogenLoading,e,n.nitrogenHalfTime,r.linearSlope,r.crossoverPressure,t),n.heliumLoading=this.calculateLinearExponentialLoading(n.heliumLoading,i,n.heliumHalfTime,r.linearSlope,r.crossoverPressure,t),this.parameters.enableOxygenTracking&&(r.oxygenLoading=this.calculateLinearExponentialLoading(r.oxygenLoading,a,this.OXYGEN_HALF_TIMES[s],r.linearSlope,r.crossoverPressure,t))}}calculateCeiling(){let t=0;for(const e of this.nmri98Compartments){const i=this.calculateCompartmentCeiling(e);t=Math.max(t,i)}return Math.max(0,t)}calculateDecompressionStops(){const t=[],e=this.calculateCeiling();if(e<=0)return t;let i=3*Math.ceil(e/3);for(;i>0;){const e=this.calculateStopTime(i);e>0&&t.push({depth:i,time:e,gasMix:this.currentDiveState.gasMix}),i-=3}return t}canAscendDirectly(){return this.calculateCeiling()<=0}getModelName(){return`NMRI98 LEM (Conservatism: ${this.parameters.conservatism}, Risk: ${this.parameters.maxDcsRisk}%)`}calculateLinearExponentialLoading(t,e,i,a,s,n){const r=this.currentDiveState.ambientPressure,o=t-r;if(e>=t)return this.calculateHaldaneLoading(t,e,i,n);if(o>s){const e=t-a*(o-s)/i*n,m=r+s;return Math.max(e,m)}return this.calculateHaldaneLoading(t,e,i,n)}calculateCompartmentCeiling(t){let e=t.nitrogenLoading+t.heliumLoading;this.parameters.enableOxygenTracking&&t.oxygenLoading>t.oxygenThreshold&&(e+=.5*(t.oxygenLoading-t.oxygenThreshold));const i=1-.1*this.parameters.conservatism,a=1/this.parameters.safetyFactor,s=10*(e-t.mValue*i*a-this.surfacePressure);return Math.max(0,s)}calculateStopTime(t){const e=this.calculateAmbientPressure(t);let i=0;for(const t of this.nmri98Compartments){let a=t.nitrogenLoading+t.heliumLoading;this.parameters.enableOxygenTracking&&t.oxygenLoading>t.oxygenThreshold&&(a+=.5*(t.oxygenLoading-t.oxygenThreshold));const s=1-.1*this.parameters.conservatism,n=1/this.parameters.safetyFactor,r=t.mValue*s*n+e;if(a>r){const s=a-r,n=a-e;if(n>t.crossoverPressure){const e=s/(t.linearSlope*(n-t.crossoverPressure)/t.nitrogenHalfTime);i=Math.max(i,e)}else{const n=t.nitrogenHalfTime*Math.log(2)*(s/(a-e+.1));i=Math.max(i,n)}}}return Math.max(1,Math.min(30,Math.ceil(i)))}calculateDCSRisk(){let t=0,e=0;for(const i of this.nmri98Compartments){let a=i.nitrogenLoading+i.heliumLoading;const s=1-.1*this.parameters.conservatism,n=1/this.parameters.safetyFactor,r=i.mValue*s*n,o=this.currentDiveState.ambientPressure+r;if(a>o){const e=(a-o)/r;t=Math.max(t,e)}if(this.parameters.enableOxygenTracking&&i.oxygenLoading>i.oxygenThreshold){const t=(i.oxygenLoading-i.oxygenThreshold)/i.oxygenThreshold;e=Math.max(e,t)}}const i=t+.3*e,a=Math.min(100,i*this.parameters.maxDcsRisk*100);return Math.round(10*a)/10}getNmri98CompartmentData(t){if(t<1||t>3)throw new Error("NMRI98 has only 3 compartments (1-3)");return{...this.nmri98Compartments[t-1]}}getAllNmri98Compartments(){return this.nmri98Compartments.map(t=>({...t}))}getParameters(){return{...this.parameters}}updateParameters(t){this.parameters={...this.parameters,...t},this.parameters.conservatism=Math.max(0,Math.min(5,this.parameters.conservatism)),this.parameters.maxDcsRisk=Math.max(.1,Math.min(10,this.parameters.maxDcsRisk)),this.parameters.safetyFactor=Math.max(1,Math.min(2,this.parameters.safetyFactor))}getModelStatus(){return{compartments:this.getAllNmri98Compartments(),parameters:this.getParameters(),ceiling:this.calculateCeiling(),dcsRisk:this.calculateDCSRisk(),canAscend:this.canAscendDirectly()}}}e.Nmri98Model=s},971:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.VVal18ThalmannModel=void 0;const a=i(303);class s extends a.DecompressionModel{constructor(t){super(),this.vval18Compartments=[],this.COMPARTMENT_HALF_TIMES=[1.5,51,488],this.HELIUM_HALF_TIMES=[.57,19.2,184.2],this.M_VALUES=[1.6,1,.65],this.CROSSOVER_PRESSURES=[.4,.2,.1],this.LINEAR_SLOPES=[.5,.3,.7],this.parameters={maxDcsRisk:3.5,safetyFactor:1,gradientFactorLow:.3,gradientFactorHigh:.85,...t},this.initializeTissueCompartments()}initializeTissueCompartments(){if(this.tissueCompartments=[],this.vval18Compartments=[],this.COMPARTMENT_HALF_TIMES&&this.HELIUM_HALF_TIMES&&this.CROSSOVER_PRESSURES&&this.M_VALUES&&this.LINEAR_SLOPES)for(let t=0;t<3;t++){const e=this.COMPARTMENT_HALF_TIMES[t],i=this.HELIUM_HALF_TIMES[t],a=this.CROSSOVER_PRESSURES[t],s=this.M_VALUES[t],n=this.LINEAR_SLOPES[t];if(void 0===e||void 0===i||void 0===a||void 0===s||void 0===n)continue;const r={number:t+1,nitrogenHalfTime:e,heliumHalfTime:i,nitrogenLoading:.79*this.surfacePressure,heliumLoading:0,get totalLoading(){return this.nitrogenLoading+this.heliumLoading}},o={...r,crossoverPressure:a,mValue:s,linearSlope:n};this.tissueCompartments.push(r),this.vval18Compartments.push(o)}}updateTissueLoadings(t){const e=this.calculatePartialPressure(this.currentDiveState.gasMix.nitrogen),i=this.calculatePartialPressure(this.currentDiveState.gasMix.helium);for(let a=0;a<this.tissueCompartments.length;a++){const s=this.tissueCompartments[a],n=this.vval18Compartments[a];s.nitrogenLoading=this.calculateLinearExponentialLoading(s.nitrogenLoading,e,s.nitrogenHalfTime,n.crossoverPressure,n.linearSlope,t),s.heliumLoading=this.calculateLinearExponentialLoading(s.heliumLoading,i,s.heliumHalfTime,n.crossoverPressure,n.linearSlope,t)}}calculateCeiling(){let t=0;for(const e of this.vval18Compartments){const i=this.calculateCompartmentCeiling(e);t=Math.max(t,i)}return Math.max(0,t)}calculateDecompressionStops(){const t=[],e=this.calculateCeiling();if(e<=0)return t;let i=3*Math.ceil(e/3);for(;i>0;){const e=this.calculateStopTime(i);e>0&&t.push({depth:i,time:e,gasMix:this.currentDiveState.gasMix}),i-=3}return t}canAscendDirectly(){return this.calculateCeiling()<=0}getModelName(){return`VVal-18 Thalmann (Risk: ${this.parameters.maxDcsRisk}%)`}calculateLinearExponentialLoading(t,e,i,a,s,n){const r=this.currentDiveState.ambientPressure,o=t-r;if(e>=t)return this.calculateHaldaneLoading(t,e,i,n);if(o>a){const e=t-s*(o-a)/i*n,m=r+a;return Math.max(e,m)}return this.calculateHaldaneLoading(t,e,i,n)}calculateCompartmentCeiling(t){const e=t.nitrogenLoading+t.heliumLoading,i=this.interpolateGradientFactor(),a=(e-t.mValue*i*this.parameters.safetyFactor-this.surfacePressure)/.1;return Math.max(0,a)}interpolateGradientFactor(){return this.currentDiveState.depth,this.parameters.gradientFactorHigh}calculateStopTime(t){if(t<=this.calculateCeiling())return 0;const e=this.vval18Compartments[1],i=e.totalLoading-this.calculateAmbientPressure(t);if(i>e.crossoverPressure){const t=e.linearSlope*(i-e.crossoverPressure)/e.nitrogenHalfTime;return Math.max(1,Math.min(30,i/t))}return Math.max(1,Math.min(15,10*i))}getVVal18CompartmentData(t){if(t<1||t>3)throw new Error("VVal-18 has only 3 compartments (1-3)");return{...this.vval18Compartments[t-1]}}getAllVVal18Compartments(){return this.vval18Compartments.map(t=>({...t}))}getParameters(){return{...this.parameters}}updateParameters(t){this.parameters={...this.parameters,...t}}calculateDCSRisk(){let t=0;for(const e of this.vval18Compartments){const i=e.nitrogenLoading+e.heliumLoading,a=this.interpolateGradientFactor(),s=e.mValue*a*this.parameters.safetyFactor,n=this.currentDiveState.ambientPressure+s;if(i>n){const e=(i-n)/s;t=Math.max(t,e)}}const e=Math.min(100,t*this.parameters.maxDcsRisk);return Math.round(10*e)/10}}e.VVal18ThalmannModel=s}},e={};function i(a){var s=e[a];if(void 0!==s)return s.exports;var n=e[a]={exports:{}};return t[a](n,n.exports,i),n.exports}(()=>{const t=i(303),e=i(819),a=i(645),s=i(127),n=i(971),r=i(678),o=i(381),m=i(865);window.DecompressionSimulator={},window.DecompressionSimulator.DecompressionModel=t.DecompressionModel,window.DecompressionSimulator.BuhlmannModel=e.BuhlmannModel,window.DecompressionSimulator.VpmBModel=a.VpmBModel,window.DecompressionSimulator.BvmModel=s.BvmModel,window.DecompressionSimulator.VVal18ThalmannModel=n.VVal18ThalmannModel,window.DecompressionSimulator.RgbmFoldedModel=r.RgbmFoldedModel,window.DecompressionSimulator.TbdmModel=o.TbdmModel,window.DecompressionSimulator.Nmri98Model=m.Nmri98Model,window.DecompressionSimulator.createModel=function(t,i={}){switch(t.toLowerCase()){case"buhlmann":return new e.BuhlmannModel({low:i.gradientFactorLow||30,high:i.gradientFactorHigh||85});case"vpmb":return new a.VpmBModel(i.conservatism||2);case"bvm":return new s.BvmModel({conservatism:i.conservatism||2,maxDcsRisk:i.maxDcsRisk||5});case"vval18":return new n.VVal18ThalmannModel({maxDcsRisk:i.dcsRiskPercent||2.3,gradientFactorLow:i.gradientFactorLow||.3,gradientFactorHigh:i.gradientFactorHigh||.85});case"rgbm":return new r.RgbmFoldedModel({conservatism:i.conservatism||2});case"tbdm":return new o.TbdmModel({conservatismFactor:i.conservatismFactor||1,bodyTemperature:i.bodyTemperature||37});case"nmri98":return new m.Nmri98Model({conservatism:i.conservatism||3,maxDcsRisk:i.maxDcsRisk||2,safetyFactor:i.safetyFactor||1.2,enableOxygenTracking:!1!==i.enableOxygenTracking});default:throw new Error("Unknown model type: "+t)}},window.DecompressionSimulator.createGasMix=function(t,e){const i=t/100,a=e/100;return{oxygen:i,helium:a,nitrogen:1-i-a}},window.DecompressionSimulator.depthToPressure=function(t){return 1.013+t/10},window.DecompressionSimulator.formatTime=function(t){const e=Math.floor(t/60),i=Math.round(t%60);return e>0?e+":"+i.toString().padStart(2,"0"):i+" min"},window.DecompressionSimulator.formatTimeHHMM=function(t){const e=Math.floor(t/60),i=Math.round(t%60);return e.toString().padStart(2,"0")+":"+i.toString().padStart(2,"0")},console.log("🤿 Decompression Simulator loaded successfully from TypeScript build"),console.log("Available models:",Object.keys(window.DecompressionSimulator).filter(t=>t.endsWith("Model")))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,